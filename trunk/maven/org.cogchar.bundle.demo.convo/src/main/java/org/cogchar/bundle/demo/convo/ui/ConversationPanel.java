/*
 * Copyright 2012 by The Cogchar Project (www.cogchar.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.cogchar.bundle.demo.convo.ui;

import org.jflux.api.core.Adapter;
import java.util.concurrent.TimeUnit;
import org.cogchar.bundle.demo.convo.ConvoResponse;
import org.jflux.api.core.node.chain.NodeChain;
import org.jflux.api.core.node.chain.NodeChainBuilder;
import org.jflux.api.core.Source;
import org.jflux.api.core.Listener;
import org.jflux.api.core.Notifier;
import org.jflux.api.schedule.HeartbeatNode;
import static org.cogchar.bundle.demo.convo.osgi.ConvoConfigUtils.*;

/**
 *
 * @author Matthew Stevenson <www.robokind.org>
 */
public class ConversationPanel extends javax.swing.JPanel {
    public final static int TAB_CONVO = 0;
    public final static int TAB_CONNECT = 1;

    private NodeChain myMonitorChain;
    private HeartbeatNode<String> myHeartbeatNode;
    private NodeChain myHeartbeatChain;
    private Source<Long> myPollIntervalSource;
    private Source<String> myHeartbeatMessageSource;
    /**
     * Creates new form ConversationPanel
     */
    public ConversationPanel() {
        initComponents();
        pnlTabs.setSelectedIndex(TAB_CONNECT);
        myPollIntervalSource = getSource(Long.class, CONF_COGBOT_POLL_INTERVAL);
        myHeartbeatMessageSource = 
                getSource(String.class, CONF_COGBOT_POLL_MESSAGE);
    }
    
    private void connectConvoLog(){
        Adapter<String,ConvoResponse> convoProc = pnlConvoConnect.getConvoProc();
        if(convoProc == null){
            return;
        }
        Notifier<String> n = conversationMonitorPanel1.getConvoInputNotifier();
        Listener<ConvoResponse> l = 
                conversationMonitorPanel1.getConvoResponseListener();
        myMonitorChain = NodeChainBuilder.build(n)
                .attach(convoProc)
                .attach(l);
        myMonitorChain.start();
        
        myHeartbeatNode = new HeartbeatNode<String>(myHeartbeatMessageSource, 0, 
                myPollIntervalSource.getValue(), TimeUnit.MILLISECONDS);
        myHeartbeatChain = NodeChainBuilder.build(myHeartbeatNode)
                .attach(convoProc).getNodeChain();
    }
    private void disconnectConvoLog(){
        if(myMonitorChain == null){
            return;
        }
        myMonitorChain.stop();
        myMonitorChain = null;
        disconnectHeartbeat();
        myHeartbeatChain = null;
    }
    
    private void connectHeartbeat(){
        pnlConvoConnect.updatetPollInterval();
        long interval = myPollIntervalSource.getValue();
        myHeartbeatNode.setPeriod(interval);
        myHeartbeatChain.start();
        tglCogbotHeartbeat.setSelected(true);
        pnlConvoConnect.setPollIntervalEnabled(false);
    }
    
    private void disconnectHeartbeat(){
        if(myHeartbeatChain == null){
            return;
        }
        myHeartbeatChain.stop();
        tglCogbotHeartbeat.setSelected(false);
        pnlConvoConnect.setPollIntervalEnabled(true);
    }
    
    public void connect(){
        if(pnlConvoConnect.connect()){
            connectConvoLog();
            tglConnect.setSelected(true);
            pnlTabs.setSelectedIndex(TAB_CONVO);
            tglCogbotHeartbeat.setEnabled(true);
        }else{
            pnlConvoConnect.disconnect();
            tglConnect.setSelected(false);
            pnlTabs.setSelectedIndex(TAB_CONNECT);
            tglCogbotHeartbeat.setEnabled(false);
        }
    }
    
    public void disconnect(){
        disconnectHeartbeat();
        disconnectConvoLog();
        pnlConvoConnect.disconnect();
        tglConnect.setSelected(false);
        pnlTabs.setSelectedIndex(TAB_CONNECT);
        tglCogbotHeartbeat.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTabs = new javax.swing.JTabbedPane();
        tabConvo = new javax.swing.JPanel();
        conversationMonitorPanel1 = new org.cogchar.bundle.demo.convo.ui.ConversationMonitorPanel();
        jPanel2 = new javax.swing.JPanel();
        pnlConvoConnect = new org.cogchar.bundle.demo.convo.ui.ConvoConnectionPanel();
        tglConnect = new javax.swing.JToggleButton();
        tglCogbotHeartbeat = new javax.swing.JToggleButton();

        javax.swing.GroupLayout tabConvoLayout = new javax.swing.GroupLayout(tabConvo);
        tabConvo.setLayout(tabConvoLayout);
        tabConvoLayout.setHorizontalGroup(
            tabConvoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabConvoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conversationMonitorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabConvoLayout.setVerticalGroup(
            tabConvoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabConvoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conversationMonitorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlTabs.addTab("Conversation", tabConvo);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlConvoConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlConvoConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlTabs.addTab("Connection", jPanel2);

        tglConnect.setText("Connect");
        tglConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglConnectActionPerformed(evt);
            }
        });

        tglCogbotHeartbeat.setText("Poll Cogbot");
        tglCogbotHeartbeat.setEnabled(false);
        tglCogbotHeartbeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglCogbotHeartbeatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(397, Short.MAX_VALUE)
                .addComponent(tglConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tglCogbotHeartbeat)
                .addContainerGap())
            .addComponent(pnlTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tglCogbotHeartbeat)
                    .addComponent(tglConnect))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tglConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglConnectActionPerformed
        if(tglConnect.isSelected()){
            connect();
        }else{
            disconnect();
        }
    }//GEN-LAST:event_tglConnectActionPerformed

    private void tglCogbotHeartbeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglCogbotHeartbeatActionPerformed
        if(tglCogbotHeartbeat.isSelected()){
            connectHeartbeat();
        }else{
            disconnectHeartbeat();
        }
    }//GEN-LAST:event_tglCogbotHeartbeatActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.cogchar.bundle.demo.convo.ui.ConversationMonitorPanel conversationMonitorPanel1;
    private javax.swing.JPanel jPanel2;
    private org.cogchar.bundle.demo.convo.ui.ConvoConnectionPanel pnlConvoConnect;
    private javax.swing.JTabbedPane pnlTabs;
    private javax.swing.JPanel tabConvo;
    private javax.swing.JToggleButton tglCogbotHeartbeat;
    private javax.swing.JToggleButton tglConnect;
    // End of variables declaration//GEN-END:variables
}
