/*
 *  Copyright 2012 by The Cogchar Project (www.cogchar.org).
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.cogchar.impl.web.wire

import org.cogchar.impl.web.config.{ControlConfig, LiftConfig}
import scala.xml.NodeSeq
import org.appdapter.core.name.Ident
import scala.collection.mutable.{ArrayBuffer,HashMap,Map,SynchronizedBuffer};
import scala.collection.mutable.ConcurrentMap
import java.util.concurrent.ConcurrentHashMap
import scala.collection.JavaConversions._ // required to use java.util.concurrent.ConcurrentHashMap as a scala.collection.mutable.ConcurrentMap


// A class to hold the state maps, etc. for Lifter. It looks like there are no getters/setters, but this is Scala so there are!
class LifterState {
  
  private final val INITIAL_CONFIG_ID = "InitialConfig" // "sessionId" for initial config for new sessions
  private final val SINGLE_SLOT_TEMPLATE = "singleSlot"
  
  // Needs some additional refactoring, since these default definitions are usually thrown away by getNewSessionState

  
  val stateBySession:ConcurrentMap[String,WebSessionState] = new DfltConcHashMap[String,WebSessionState]

  val globalLifterVariablesByName:ConcurrentMap[String,String] = new DfltConcHashMap[String,String]
  
  var lifterInitialized:Boolean = false // Will be set to true once PageCommander receives initial control config from LiftAmbassador
  val activeSessions = new ArrayBuffer[String] with SynchronizedBuffer[String]
  var sessionsAwaitingStart = new ArrayBuffer[String] with SynchronizedBuffer[String]
   
  // Needed to "de-bounce" controls, mainly necessary now for Android 4.1 Webview JavaScript bug
  // This must *not* involve concurrent maps, as the debounce routine relies on its own synchronization strategy to work properly
  val lastTimeAcutatedBySlot:Map[String, Map[Int,Long]] = new HashMap[String,Map[Int,Long]]
  
  // This exceedingly ugly data structure, mapped by session and control ID, contains data generated by the ControlInitializationHandlers
  // which is required to complete the snippet rendering when the snippets markup is pushed to the sessions by Comet and invoked by 
  // Lift. This is required due to the combination of pushing our snippet markup via Coment and the fact that PageCommander is a
  // session stateless object, and hopefully will be eventually eliminated by future major refactorings.
  // For that reason, and because it has special status, it's being left out of SessionState for now...
  val snippetRenderDataMap:ConcurrentMap[String,HashMap[Int, Any]] = new DfltConcHashMap[String,HashMap[Int, Any]]

  def getSnippetDataMapForSession(sessionId:String) = {
	if (!(snippetRenderDataMap contains sessionId)) {
	  snippetRenderDataMap(sessionId) = snippetRenderDataMap(INITIAL_CONFIG_ID).clone
	}
	//println("getSnippetDataMapForSession: Session " + sessionId + " has state with size " + snippetRenderDataMap(sessionId).size) // TEST ONLY
	snippetRenderDataMap(sessionId)
  }
  
  
  // Should only be called after clearAndInitializeState (and loading of the initial state into stateBySession(INITIAL_CONFIG_ID)) 
  def initializeSession(sessionId:String) {
	stateBySession(sessionId) = makeNewSessionState(sessionId)
	// Add session to activeSessions list
	if (!(activeSessions contains sessionId)) {activeSessions += sessionId}
	// We need a new sub map for lastTimeAcutatedBySlot, which has to be kept separate from session state since it can't be a concurrent map
	lastTimeAcutatedBySlot(sessionId) = new HashMap[Int,Long]
  }
  
  // New sessions need a state based on the special SessionState with the INITIAL_CONFIG_ID
  // We don't really need a full copy constructor, so provide this.
  // It might be better to use somewhat more verbose for comprehensions to fill the existing maps in newSession from the 
  // contents of those in initialState. That would look messier but would allow all maps in SessionState to be vals
  // and avoid just throwing away and replacing maps created in the SessionState constructor. So likely more refactoring
  // to come.
  private def makeNewSessionState(sessionId:String) : WebSessionState = {
	val newSessionState = new WebSessionState(sessionId)
	val initialStateContents : WebSessionState = stateBySession(INITIAL_CONFIG_ID)
	newSessionState.initUsingContents(initialStateContents)
	newSessionState
  }
  
  def clearAndInitializeState {
	stateBySession.clear
	stateBySession(INITIAL_CONFIG_ID) = new WebSessionState(INITIAL_CONFIG_ID)
	globalLifterVariablesByName.clear
	lastTimeAcutatedBySlot.clear
	snippetRenderDataMap.clear
	snippetRenderDataMap(INITIAL_CONFIG_ID) = new HashMap[Int, Any]
  }
  
  def prepareSessionForNewConfig(sessionId:String) {
	val previousSessionState = stateBySession(sessionId)
	val nextSessionState  = new WebSessionState(sessionId)
	nextSessionState.propagateStateCore(previousSessionState)
//	Above line replaces:
//	stateBySession(sessionId).sessionLifterVariablesByName = variables
//	stateBySession(sessionId).lastLiftConfig = lastConfig
	stateBySession(sessionId) = nextSessionState
  }
  
  def removeSession(sessionId:String) {
	// Session is no longer active...
	activeSessions remove sessionId
	stateBySession remove sessionId
	lastTimeAcutatedBySlot remove sessionId
	snippetRenderDataMap remove sessionId
  }
  
	def getMaxControlCount() : Int = HashMapBindings.MAX_CONTROL_QUANTITY
	
	def getSingleSlotTemplateName() : String = SINGLE_SLOT_TEMPLATE
	
	def getSessionInitialConfigID() : String = INITIAL_CONFIG_ID
	
	def getWebSessionState(sessionId:String) : WebSessionState = stateBySession(sessionId)

	
}


