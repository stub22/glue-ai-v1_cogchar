/*
 *  Copyright 2011 by The Cogchar Project (www.cogchar.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.cogchar.nbui.render.trigger;

import org.cogchar.svc.behav.control.ActionCallbackMap;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JButton;
import org.jflux.api.core.Listener;

/**
 *
 * @author Matthew Stevenson <www.cogchar.org>
 */
public class TriggerPanel extends javax.swing.JPanel implements ActionCallbackMap {

    private Map<String, JButton> myButtonMap;

    /**
     * Creates new form TriggerPanel
     */
    public TriggerPanel() {
        initComponents();
        setLayout(new FlowLayout());
        myButtonMap = new HashMap<String, JButton>();
    }

    @Override
    public void putActionCallback(String name, ActionListener listener) {
        JButton b = new JButton(name);
        b.addActionListener(listener);
        myButtonMap.put(name, b);
        add(b);
        revalidate();
        repaint();
    }

    @Override
    public void removeActionCallback(String name) {
        JButton b = myButtonMap.remove(name);
        if (b != null) {
            remove(b);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public ActionListener getActionCallback(String actionCallbackName) {
        ActionListener result = null;
        JButton b = myButtonMap.get(actionCallbackName);
        if (b != null) {
            ActionListener allAL[] = b.getActionListeners();
            if (allAL != null) {
                if (allAL.length == 1) {
                    result = allAL[0];
                }
            }
        }
        return result;
    }

    public void addActionListener(Listener<String> listener) {
    }

    public void removeActionListener(Listener<String> listener) {
    }

    public void addActionRemoveListener(Listener<String> listener) {
    }

    public void removeActionRemoveListener(Listener<String> listener) {
    }

    public Set<String> getActionKeys() {
        return myButtonMap.keySet();
    }
}
